load(url("http://www.math.ku.dk/~tfb525/teaching/statbe/pcb.RData"))
load(url("http://www.math.ku.dk/~tfb525/teaching/statbe/pcb.RData"))
y3 = PCB$age
x3 = PCB$concentration
fit3 = lm(y3 ~ x3)
plot(x3,y3)
abline(reg=fit3, col=4)
summary(fit3)
View(pcb)
y3 = pcb$Age
x3 = pcb$PCB
fit3 = lm(y3 ~ x3)
plot(x3,y3)
abline(reg=fit3, col=4)
summary(fit3)
z3 = log(pcb$Age)
fit4 = lm(z3 ~ x3)
plot(x3,z3)
abline(reg=fit4, col=4)
summary(fit4)
load(url("http://www.math.ku.dk/~tfb525/teaching/statbe/pcb.RData"))
x3 = pcb$Age
y3 = pcb$PCB
fit3 = lm(y3 ~ x3)
plot(x3,y3)
abline(reg=fit3, col=4)
summary(fit3)
z3 = log(y3)
fit4 = lm(z3 ~ x3)
plot(x3,z3)
abline(reg=fit4, col=4)
summary(fit4)
fit5 = lm(z3 ~ poly(x3, 3, raw=TRUE))
summary(fit5)
fit5 = lm(z3 ~ poly(x3, 2, raw=TRUE))
summary(fit5)
fit5 = lm(z3 ~ poly(x3, 2, raw=TRUE))
summary(fit5)
y4 = predict(fit5)
lines(x3, y4, col=9)
lines(x3, y4, col=8)
lines(x3, y4, col=7)
plot(fit5)
z3 = log(y3)
fit6 = lm(z3 ~ x3^(1/3))
plot(x3^(1/3),z3)
abline(reg=fit6, col=4)
summary(fit6)
abline(reg=fit6, col=4)
z3 = log(y3)
fit6 = lm(z3 ~ x3^(1/3))
z3 = log(y3)
W =x3^(1/3)
fit6 = lm(z3 ~ w)
plot(w, z3)
abline(reg=fit6, col=4)
summary(fit6)
w =x3^(1/3)
fit6 = lm(z3 ~ w)
plot(w, z3)
abline(reg=fit6, col=4)
summary(fit6)
summary(fit5)
bobby = log(y4)= Be0 + Be1 * xi + Be2 *xi^(2) + Se
bobby
Be0 = -0.615876
Be1 = -0.562828
Be2 = -0.024184
Se = 0.4943
xi = 6.5
bobby = log(y4)= Be0 + Be1 * xi + Be2 *xi^(2) + Se
bobby_logged = Be0 + Be1 * xi + Be2 *xi^(2) + Se
bobby_logged
Be1 = 0.562828
bobby_logged = Be0 + Be1 * xi + Be2 *xi^(2) + Se
bobby_logged
load(url("http://www.math.ku.dk/~tfb525/teaching/statbe/data.RData"))
View(data)
?lm()
xa = data$x
ya = data$y
fita = lm(ya ~ poly(xa, k, raw=TRUE))
summary(fita)
k = 1
xa = data$x
ya = data$y
fita = lm(ya ~ poly(xa, k, raw=TRUE))
summary(fita)
fitb = lm(ya ~ poly(xa, k+1, raw=TRUE))
summary(fitb)
anova(fita,fitb)
anova(fitb,fita)
load(url("http://www.math.ku.dk/~tfb525/teaching/statbe/data.RData"))
k = 1
for(i in c(1:100)){
xa = data$x
ya = data$y
fita = lm(ya ~ poly(xa, k, raw=TRUE))
fitb = lm(ya ~ poly(xa, k+1, raw=TRUE))
migleisclever = anova(fitb,fita)$Pr[2]
if (migleisclever<0.05){
k = k + 1
}  else {
break
}}
fitc = lm(y-poly(x, 7, raw =T))
plot(fitc)
fitc = lm(ya-poly(xa, 7, raw =T))
k = 1
xa = data$x
ya = data$y
fitc = lm(ya-poly(xa, 7, raw =T))
plot(fitc)
fitc = lm(ya ~ poly(xa, 7, raw =T))
if (migleisclever<0.05){
k = k + 1
}  else {
break
}}
plot(fitc)
plot(xa,ya)
fit_nls = nls(ya ~ beta0+ beta1*exp(beta2*xa) + beta3*exp(beta4*xa))
beta0 = 0; beta1 = -2; beta2 = -2; beta3 = 1; beta4 = -1; sigma = 1
fit_nls = nls(ya ~ beta0+ beta1*exp(beta2*xa) + beta3*exp(beta4*xa))
fit_nls = nls(ya ~ beta0+ beta1*exp(beta2*xa) + beta3*exp(beta4*xa),
start = list(beta0 = 0, beta1 = -2, beta2 = -2, beta3 = 1, beta4 = -1))
summary(fit_nls)
confint(fit_nls)
confint(fit_nls)
fitted = predict(fit_nls)
resid = residuals(fit_nls)
plot(resid ~ fitted)
qqnorm(resid)
summary(fit_nls)
confint(fit_nls)
?glm()
Cerio = read.table("http://www.math.ku.dk/~tfb525/teaching/statbe/Ceriodaphnia.txt", header=TRUE)
View(Cerio)
fit = glm(organisms  ̃ concentration,
data = Cerio,
family = poisson(link="log"))
plot(log(organisms)  ̃ concentration, data = Cerio)
abline(fit)
Cerio = read.table("http://www.math.ku.dk/~tfb525/teaching/statbe/Ceriodaphnia.txt", header=TRUE)
fit = glm(organisms ~ concentration , data = Cerio, family = poisson(link="log"))
plot(log(organisms) ~̃ concentration, data = Cerio)
abline(fit)
plot(log(organisms) ~ concentration, data = Cerio)
abline(fit)
summary(fit)
plot(fit)
}
lambda = 1/mean(Cerio$concentration)
B = 10000; n = length(Cerio$concentration)
bootstrap_data = matrix(rexp(B*n, lambda), ncol=B)
bootstrap_t = 1/apply(bootstrap_data, 2, mean)
plot(density(bootstrap_t), lwd=2)
abline(v=quantile(bootstrap_t, c(0.025, 0.975)), lty=2, lwd=2)
lambda = mean(Cerio$concentration)
B = 10000; n = length(Cerio$concentration)
bootstrap_data = matrix(rexp(B*n, lambda), ncol=B)
bootstrap_t = 1/apply(bootstrap_data, 2, mean)
plot(density(bootstrap_t), lwd=2)
abline(v=quantile(bootstrap_t, c(0.025, 0.975)), lty=2, lwd=2)
View(bootstrap_data)
View(Cerio)
View(bootstrap_data)
?repxp()
?rexp()
rpos()
?rpos()
lambda = mean(Cerio$concentration)
B = 10000; n = length(Cerio$concentration)
bootstrap_data = matrix(rpois(B*n, lambda), ncol=B)
bootstrap_t = 1/apply(bootstrap_data, 2, mean)
plot(density(bootstrap_t), lwd=2)
abline(v=quantile(bootstrap_t, c(0.025, 0.975)), lty=2, lwd=2)
Cerio = read.table("http://www.math.ku.dk/~tfb525/teaching/statbe/Ceriodaphnia.txt", header=TRUE)
fit = glm(organisms ~ concentration , data = Cerio, family = poisson(link="log"))
plot(log(organisms) ~ concentration, data = Cerio)
abline(fit)
summary(fit)
plot(fit)
plot(density(bootstrap_t), lwd=2)
abline(v=quantile(bootstrap_t, c(0.025, 0.975)), lty=2, lwd=2)
load(url("http://www.math.ku.dk/ ̃tfb525/teaching/statbe/flies.RData"))
load(url("http://www.math.ku.dk/ ̃tfb525/teaching/statbe/flies.RData"))
load(url("http://www.math.ku.dk/~tfb525/teaching/statbe/flies.RData"))
View(fly.death)
fit = glm(dead ~ log(conc), data = fly.death, family = binomial("logit"))
b0 = fit$coefficients[1]; b1 = fit$coefficients[2]
load(url("http://www.math.ku.dk/~tfb525/teaching/statbe/flies.RData"))
plot(dead ~ conc, data = fly.death)
plot(dead ~ log(conc), data = fly.death)
fit = glm(dead ~ log(conc), data = fly.death, family = binomial("logit"))
b0 = fit$coefficients[1]; b1 = fit$coefficients[2]
plot(dead ~ log(conc), data = fly.death)
curve( exp(b0+b1*x) / (1+exp(b0+b1*x)), add=TRUE)
sumtable = table(fly.death)
plot(log(as.numeric(rownames(sumtable))), table(fly.death)[,2]/20, xlab="log(concentration)", ylab="death rate") curve( exp(b0+b1*x) / (1+exp(b0+b1*x)), add=TRUE)
load(url("http://www.math.ku.dk/~tfb525/teaching/statbe/flies.RData"))
plot(dead ~ conc, data = fly.death)
plot(dead ~ log(conc), data = fly.death)
fit = glm(dead ~ log(conc), data = fly.death, family = binomial("logit"))
b0 = fit$coefficients[1]; b1 = fit$coefficients[2]
plot(dead ~ log(conc), data = fly.death)
curve( exp(b0+b1*x) / (1+exp(b0+b1*x)), add=TRUE)
sumtable = table(fly.death)
plot(log(as.numeric(rownames(sumtable))), table(fly.death)[,2]/20, xlab="log(concentration)", ylab="death rate") curve( exp(b0+b1*x) / (1+exp(b0+b1*x)), add=TRUE)
plot(log(as.numeric(rownames(sumtable))), table(fly.death)[,2]/20, xlab="log(concentration)", ylab="death rate")
curve( exp(b0+b1*x) / (1+exp(b0+b1*x)), add=TRUE)
plot(dead ~ conc, data = fly.death)
plot(dead ~ log(conc), data = fly.death)
fit = glm(dead ~ log(conc), data = fly.death, family = binomial("logit"))
b0 = fit$coefficients[1]; b1 = fit$coefficients[2]
plot(dead ~ log(conc), data = fly.death)
curve( exp(b0+b1*x) / (1+exp(b0+b1*x)), add=TRUE)
sumtable = table(fly.death)
plot(log(as.numeric(rownames(sumtable))), table(fly.death)[,2]/20, xlab="log(concentration)", ylab="death rate")
curve( exp(b0+b1*x) / (1+exp(b0+b1*x)), add=TRUE)
plot(log(as.numeric(rownames(sumtable))), table(fly.death)[,2]/20, xlab="log(concentration)", ylab="death rate")
curve( exp(b0+b1*x) / (1+exp(b0+b1*x)), add=TRUE)
integrate(function(x) { dnorm(x, 3, 5)*x },
lower=-Inf,
upper=Inf )}
integrate(function(x) { dnorm(x, 3, 5)*x
lower=-Inf,
upper=Inf )}
integrate(function(x) { dnorm(x, 3, 5)*x },
lower=-Inf,
upper=Inf )
plot(integrate(function(x) { dnorm(x, 3, 5)*x },
lower=-Inf,
upper=Inf ))
rn_unif = runif(1000)
plot(rn_unif)
curve(rn_unif)
lines(rn_unif)
ecdf(rn_unif)
plot(ecdf(rn_unif))
rn_unif = runif(1000)
rn_norm = qnorm(rn_unif)
plot(rn_norm)
plot(ecdf(rn_norm))
rn_norm = qnorm(rn_unif)
tq = qnorm( (1:1000 - 0.5)/1000)
plot(tq, sort(rn_norm)
abline(0,1)
rn_unif = runif(1000)
rn_norm = qnorm(rn_unif)
tq = qnorm( (1:1000 - 0.5)/1000)
plot(tq, sort(rn_norm)
abline(0,1)
plot(tq, sort(rn_norm))
abline(0,1)
plot(tq, sort(rn_norm))
abline(0,1)
rn_unif = runif(1000)
rn_norm = qnorm(rn_unif)
tq = qnorm( (1:1000 - 0.5)/1000)
plot(tq, sort(rn_norm))
abline(0,1)
plot(ecdf(rn_norm))
mu   = integrate( function(x) x*dgamma(x, 2, 4), lower=0, upper=Inf )$value
sig2 = integrate( function(x) (x-mu)^2*dgamma(x, 2, 4), lower=0, upper=Inf )$value
mu
sig2
data = rnorm(100, 5, 5)
hist(data, prob=TRUE)
curve(dnorm(x,5,5), add=TRUE)
hist(data, prob=TRUE, 1)
curve(dnorm(x,5,5), add=TRUE)
hist(data, prob=TRUE, 3)
curve(dnorm(x,5,5), add=TRUE)
hist(data, prob=TRUE, 100)
curve(dnorm(x,5,5), add=TRUE)
hist(data, prob=TRUE)
curve(dnorm(x,5,5), add=TRUE)
plot(density(data))
curve(dnorm(x,5,5), add=TRUE, col="red")
dens = density(data)
dens$bw                # Oh, it is about 1.5
curve(dnorm(x,5,5), col="red", -10, 20)
lines(density(data, bw=0.1))
curve(dnorm(x,5,5), col="red", -10, 20)
lines(density(data, bw=2))
curve(dnorm(x,5,5), col="red", -10, 20)
lines(density(data, bw=10))
plot(ecdf(data))
curve(pnorm(x,5,5), add=TRUE, col="red")
curve(dnorm(x,5,5), col="red", -10, 20)
lines(density(data, bw=0.1))
curve(dnorm(x,5,5), col="red", -10, 20)
lines(density(data, bw=2))
curve(dnorm(x,5,5), col="red", -10, 20)
lines(density(data, bw=10))
plot(density(data))
curve(dnorm(x,5,5), add=TRUE, col="red")
plot(ecdf(data))
curve(pnorm(x,5,5), add=TRUE, col="red")
plot(density(neuron$isi))
curve(dexp(x, 1.15), col="red", add=TRUE, from=0, to=5)
curve(dgamma(x, 1.16, 1.34), col="blue", add=TRUE, from=0, to=5)
plot(density(neuron$isi))
curve(dexp(x, 1.15), col="red", add=TRUE, from=0, to=5)
curve(dgamma(x, 1.16, 1.34), col="blue", add=TRUE, from=0, to=5)
neuron = read.table("http://math.ku.dk/~tfb525/teaching/statbe/neuronspikes.txt", col.names="isi")
plot(density(neuron$isi))
curve(dexp(x, 1.15), col="red", add=TRUE, from=0, to=5)
curve(dgamma(x, 1.16, 1.34), col="blue", add=TRUE, from=0, to=5)
neuron = read.table("http://math.ku.dk/~tfb525/teaching/statbe/neuronspikes.txt", col.names="isi")
plot(density(neuron$isi))
curve(dexp(x, 1.15), col="red", add=TRUE, from=0, to=5)
curve(dgamma(x, 1.16, 1.34), col="blue", add=TRUE, from=0, to=5)
n = length(neuron$isi)
tq_exp   = qexp((1:n-0.5)/n, 1.15)
tq_gamma = qgamma((1:n-0.5)/n, 1.16, 1.34)
plot(tq_exp, sort(neuron$isi), pch=16, col="red")
points(tq_gamma, sort(neuron$isi), pch=16, col="blue")
abline(0,1)
plot(tq_exp, sort(neuron$isi), type="l", col="red")
lines(tq_gamma, sort(neuron$isi), pch=16, col="blue")
abline(0,1)
weibull_pdf = function(x, beta) {
beta * x^{beta-1} * exp(-x^beta)
}
weibull_cdf = function(x, beta) {
1 - exp(-x^{beta})
}
weibull_qf = function(p, beta) {
(-log(1-p))^(1/beta)
}
curve(weibull_pdf(x, 2.3), 0, 5)
curve(dweibull(x, 2.3), add=TRUE, col="red", lty=2)
curve(weibull_cdf(x, 2.3), 0, 5)
curve(pweibull(x, 2.3), add=TRUE, col="red", lty=2)
curve(weibull_qf(x, 2.3), 0, 1)
curve(qweibull(x, 2.3), add=TRUE, col="red", lty=2)
mu = integrate(function(x) x * weibull_pdf(x, 2.3), lower=0, upper=Inf)$value
var = integrate(function(x) (x-mu)^2 * weibull_pdf(x, 2.3), lower=0, upper=Inf)
rn_unif = runif(1000)
rn_weibull = weibull_qf(rn_unif, 2.3)
mean(rn_weibull)
var(rn_weibull)
tq = weibull_qf( (1:1000-0.5)/1000, 2.3 )
plot(tq, sort(rn_weibull))
abline(0,1)
tq = qt( (1:N-0.5) / N, n-1)
plot(tq, sort(rn_t))
abline(0,1)
tq = qt( (1:N-0.5) / N, n-1)
plot(tq, sort(rn_t))
abline(0,1)
n   = 10
N   = 1000
mu  = 3
sig = 2
sample_t = function() {
rn       = rnorm(n, mu, sig)
emp_mean = mean(rn)
emp_sem  = sd(rn) / sqrt(n)
(emp_mean - mu) / emp_sem
}
rn_t = replicate(N, sample_t())
tq = qt( (1:N-0.5) / N, n-1)
plot(tq, sort(rn_t))
abline(0,1)
data = rexp(100, 1.4)
data = rexp(100, 1.4)
mllk = function(lambda) {
-sum(log(lambda) - lambda*data)
# or using dexp:
# -sum(log(dexp(data, lambda)))
}
optimize(mllk, interval=c(0, 10))
plot(epdf(data))
plot(cpdf(data))
plot(ecdf(data))
plot(ecdf(data))
plot(density(data))
plot(data)
plot(ecdf(data))
?optimize
View(mllk)
x = rnorm(20, 2, 4)
y = rnorm(40, 2.5, 4.5)
t.test(x, mu=4)
t.test(x, mu=5)
t.test(x, y, var.equal=TRUE)
?cbing()
?cbind()
beta0 = 1; beta1 = -3; beta2 = 2; sigma = 1
beta0 = 1; beta1 = -3; beta2 = 2; sigma = 1
x = seq(0, 1, 0.02)
y = beta0 + exp(beta1*x + beta2) + rnorm(length(x), 0,
sigma)
sim = data.frame(regressor = x, dependent = y)
fit = nls(dependent  ̃ beta0 + exp(beta1*regressor +
beta2),
data = sim,
start = list(beta0=1, beta1=-1, beta2=1))
fit = nls(dependent  ̃ beta0 + exp(beta1*regressor +
beta2),
data = sim,
start = list(beta0=1, beta1=-1, beta2=1))
fit = nls(dependent ~ beta0 + exp(beta1*regressor +
beta2),
data = sim,
start = list(beta0=1, beta1=-1, beta2=1))
plot(x, y)
newdata = data.frame(regressor = seq(0,1,0.01))
lines(newdata$regressor, predict(fit, newdata), col=2)
plot(x, y)
newdata = data.frame(regressor = seq(0,1,0.01))
lines(newdata$regressor, predict(fit, newdata), col=2)
plot(x, y)
newdata = data.frame(regressor = seq(0,1,0.01))
lines(newdata$regressor, predict(fit, newdata), col=2)
beta0 = 1; beta1 = -5; beta2 = 3; sigma = 1
x = seq(0, 1, 0.02)
y = beta0 + exp(beta1*x + beta2) + rnorm(length(x), 0,
sigma)
sim = data.frame(reg = x, out = y)
beta0 = 1; beta1 = -5; beta2 = 3; sigma = 1
x = seq(0, 1, 0.02)
y = beta0 + exp(beta1*x + beta2) + rnorm(length(x), 0,
sigma)
sim = data.frame(reg = x, out = y)
fit = lm(out  ̃ poly(reg, 3), data = sim)
newdata = data.frame(reg = seq(-2, 2, 0.01))
plot(sim$reg, sim$out)
beta0 = 1; beta1 = -5; beta2 = 3; sigma = 1
x = seq(0, 1, 0.02)
y = beta0 + exp(beta1*x + beta2) + rnorm(length(x), 0,
sigma)
sim = data.frame(reg = x, out = y)
fit = lm(out  ̃ poly(reg, 3), data = sim)
newdata = data.frame(reg = seq(-2, 2, 0.01))
plot(sim$reg, sim$out)
lines(newdata$reg, predict(fit, newdata), col=2, lwd=2)
fit = lm(out ~ poly(reg, 3), data = sim)
newdata = data.frame(reg = seq(-2, 2, 0.01))
plot(sim$reg, sim$out)
lines(newdata$reg, predict(fit, newdata), col=2, lwd=2)
?lm()
fit = lm(out ~ poly(reg, 3), data = sim)
newdata = data.frame(reg = seq(-2, 2, 0.01))
plot(sim$reg, sim$out)
lines(newdata$reg, predict(fit, newdata), col=2, lwd=2)
b0 = 1.2; b1 = -0.1; b2 = 5; b3 = 2; sigma = 2
x = matrix(rnorm(300, 2:4, 1:3), ncol=100)
y = b0 + b1 * x[1,] + b2 * x[2,] + b3 * x[3,] +
rnorm(100, 0, sigma)
sim = data.frame(out = y, reg1 = x[1,], reg2 = x[2,],
reg3 = x[3,])
fit_all = lm(out  ̃ ., data = sim)
fit1 = lm(out  ̃ reg3, data = sim)
fit2 = lm(out  ̃ reg2 + reg3, data = sim)
anova(fit_all, fit1)
anova(fit_all, fit2)
b0 = 1.2; b1 = -0.1; b2 = 5; b3 = 2; sigma = 2
x = matrix(rnorm(300, 2:4, 1:3), ncol=100)
y = b0 + b1 * x[1,] + b2 * x[2,] + b3 * x[3,] +
rnorm(100, 0, sigma)
sim = data.frame(out = y, reg1 = x[1,], reg2 = x[2,],
reg3 = x[3,])
fit_all = lm(out ~ ., data = sim)
fit1 = lm(out ~ reg3, data = sim)
fit2 = lm(out ~ reg2 + reg3, data = sim)
anova(fit_all, fit1)
anova(fit_all, fit2)
Cerio = read.table("http://www.math.ku.dk/~tfb525/teaching/statbe/Ceriodaphnia.txt",
header=TRUE)
A <- c(10, 20, 30, 50)
B <- c(1, 4, 2, 3)
C <- c(2.5, 3.5)
A+B
A+C
A <- c(10, 20, 30, 50)
B <- c(1, 4, 2, 3)
C <- c(2.5, 3.5)
A+B
A+C
popinfo = read.table("~/popgen2016/exercises/structure/pop.info")
table(popinfo[,1])
library(snpMatrix)
data <- read.plink("pruneddata")
geno <- matrix(as.integer(data@.Data),nrow=nrow(data@.Data))
geno <- t(geno)
geno[geno==0]<- NA
geno<-geno-1
table(geno)
install.packages("survival")
install.packages("survival")
install.packages("survival")
library(snpMatrix)
data <- read.plink("pruneddata")
setwd("opt/rpackages")
for (filename in list.files()) {
mensaje <- paste("Installing ", filename, " ... ", sep = "")
message(mensaje)
install.packages(filename, repos = NULL, type="source")
}
setwd("opt/rpackages")
shiny::runApp("selectionScan")
getwd
getwd()
setwd(~/PopGen/popgen2016/exercises/pophistory)
setwd(home/PopGen/popgen2016/exercises/pophistory)
setwd("home/PopGen/popgen2016/exercises/pophistory")
q()
setwd("~/GIT/pop_gen_exam/Will's wonderous workshop!")
